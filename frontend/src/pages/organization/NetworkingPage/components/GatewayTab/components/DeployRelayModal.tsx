import { useEffect, useMemo, useState } from "react";
import { SingleValue } from "react-select";
import { faCopy, faUpRightFromSquare } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { twMerge } from "tailwind-merge";

import { createNotification } from "@app/components/notifications";
import {
  FilterableSelect,
  FormLabel,
  IconButton,
  Input,
  Modal,
  ModalContent
} from "@app/components/v2";
import { useOrganization } from "@app/context";
import {
  useAddIdentityTokenAuth,
  useCreateTokenIdentityTokenAuth,
  useGetIdentityMembershipOrgs,
  useGetIdentityTokenAuth
} from "@app/hooks/api";
import { slugSchema } from "@app/lib/schemas";

type Props = {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
};

export const DeployRelayModal = ({ isOpen, onOpenChange }: Props) => {
  const { protocol, hostname, port } = window.location;
  const portSuffix = port && port !== "80" ? `:${port}` : "";
  const siteURL = `${protocol}//${hostname}${portSuffix}`;

  const [name, setName] = useState("");
  const [host, setHost] = useState("");
  const [identity, setIdentity] = useState<null | {
    id: string;
    name: string;
  }>(null);
  const [identityToken, setIdentityToken] = useState("");

  useEffect(() => {
    if (!isOpen) {
      setName("");
      setHost("");
      setIdentity(null);
      setIdentityToken("");
    }
  }, [isOpen]);

  const { currentOrg } = useOrganization();
  const organizationId = currentOrg?.id || "";

  const { data: identityMembershipOrgsData, isPending: isIdentitiesLoading } =
    useGetIdentityMembershipOrgs({
      organizationId,
      limit: 20000
    });
  const identityMembershipOrgs = identityMembershipOrgsData?.identityMemberships || [];

  const { mutateAsync: createToken } = useCreateTokenIdentityTokenAuth();
  const { mutateAsync: addIdentityTokenAuth } = useAddIdentityTokenAuth();
  const { refetch } = useGetIdentityTokenAuth(identity?.id ?? "");

  useEffect(() => {
    const generateToken = async () => {
      if (!identity) return;

      try {
        const { data: identityTokenAuth } = await refetch();
        if (!identityTokenAuth) {
          await addIdentityTokenAuth({
            identityId: identity.id,
            organizationId,
            accessTokenTTL: 2592000,
            accessTokenMaxTTL: 2592000,
            accessTokenNumUsesLimit: 0,
            accessTokenTrustedIps: [{ ipAddress: "0.0.0.0/0" }, { ipAddress: "::/0" }]
          });
          createNotification({
            text: "Automatically enabled token authentication for this identity.",
            type: "info"
          });
        }

        const token = await createToken({
          identityId: identity.id,
          name: "relay token (autogenerated)"
        });
        setIdentityToken(token.accessToken);
        createNotification({
          text: "Automatically generated a token for this identity.",
          type: "info"
        });
      } catch (err) {
        console.error(err);
        createNotification({
          text: "Failed to generate token for identity",
          type: "error"
        });
        setIdentityToken("");
      }
    };

    generateToken();
  }, [identity, organizationId, refetch, addIdentityTokenAuth, createToken]);

  const handleIdentityChange = (selectedIdentity: SingleValue<{ id: string; name: string }>) => {
    setIdentity(selectedIdentity);
    setIdentityToken("");
  };

  const isNameValid = useMemo(() => !name || slugSchema().safeParse(name).success, [name]);

  const isCommandReady = useMemo(
    () => !!name && !!host && isNameValid && !!identityToken,
    [name, isNameValid, host, identityToken]
  );

  const command = useMemo(
    () =>
      `infisical relay start --name=${name} --domain=${siteURL} --host=${host} --token=${identityToken}`,
    [name, siteURL, host, identityToken]
  );

  return (
    <Modal isOpen={isOpen} onOpenChange={onOpenChange}>
      <ModalContent
        className="max-w-2xl"
        title="Deploy Relay"
        subTitle="Configure and run the CLI command to deploy your relay."
        bodyClassName="overflow-visible"
      >
        <FormLabel label="Name" tooltipText="The name for your relay." />
        <Input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter relay name..."
          isError={!isNameValid}
        />

        <FormLabel
          label="Host"
          tooltipText="The host of the system you're deploying the relay to."
          className="mt-4"
        />
        <Input value={host} onChange={(e) => setHost(e.target.value)} placeholder="0.0.0.0" />

        <FormLabel
          label="Identity"
          tooltipText="The identity to use with your relay."
          className="mt-4"
        />
        <FilterableSelect
          value={identity}
          onChange={(e) =>
            handleIdentityChange(
              e as SingleValue<{
                id: string;
                name: string;
              }>
            )
          }
          isLoading={isIdentitiesLoading}
          placeholder="Select identity..."
          options={identityMembershipOrgs.map((membership) => membership.identity)}
          getOptionValue={(option) => option.id}
          getOptionLabel={(option) => option.name}
        />

        <FormLabel label="CLI Command" className="mt-4" />
        <div className="flex gap-2">
          <Input value={command} isDisabled className={isCommandReady ? "" : "opacity-50"} />
          <IconButton
            ariaLabel="copy"
            variant="outline_bg"
            colorSchema="secondary"
            onClick={() => {
              navigator.clipboard.writeText(command);

              createNotification({
                text: "Command copied to clipboard",
                type: "info"
              });
            }}
            className={twMerge("w-10", !isCommandReady && "pointer-events-none opacity-50")}
            isDisabled={!isCommandReady}
          >
            <FontAwesomeIcon icon={faCopy} />
          </IconButton>
        </div>
        <a
          href="https://infisical.com/docs/cli/overview"
          target="_blank"
          className="mt-2 flex h-4 w-fit items-center gap-2 border-b border-mineshaft-400 text-sm text-mineshaft-400 transition-colors duration-100 hover:border-yellow-400 hover:text-yellow-400"
          rel="noreferrer"
        >
          <span>Install the Infisical CLI</span>
          <FontAwesomeIcon icon={faUpRightFromSquare} className="size-3" />
        </a>
      </ModalContent>
    </Modal>
  );
};
